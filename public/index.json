[{"content":" Всеки от нас използва използва интернет вкъщи, но как да се ориентираме в гората от настройки и понятия свързани с компютърните мрежи? Тази статия е за това, да ви даде основата.\nIP адрес Представете си IP адреса като \u0026ldquo;пощенски адрес\u0026rdquo; на устройство в интернет. Точно както пощенският адрес ви казва къде живее даден човек или компания, IP адресът показва местоположението на компютър, телефон или друг вид устройство в глобалната мрежа.\nЕто как се съотнасят:\nПощенски адрес: Съдържа информация като град, улица, номер на сграда и апартамент. Това помага пощата да стигне точно до вашия дом.\nПример: София, ул. \u0026ldquo;Витоша\u0026rdquo; №10, ап. 5. IP адрес: Състои се от числа и/или букви (в зависимост дали е IPv4 или IPv6). Той идентифицира точното устройство в мрежата.\nIPv4 пример: 192.168.0.1. IPv6 пример: 2001:0db8:85a3:0000:0000:8a2e:0370:7334. Сравнение:\nПощенски адрес: Помага за доставяне на писма до физическо място. IP адрес: Помага за \u0026ldquo;доставяне\u0026rdquo; на данни (например уеб страници) до правилното устройство. Пример в действие: Ако изпратите писмо (заявка за уеб страница) до даден уебсайт (например www.google.bg ), DNS (като \u0026ldquo;пощенска служба\u0026rdquo;) превежда домейн името в IP адрес. След това \u0026ldquo;пощальонът\u0026rdquo; (интернет доставчикът) използва IP адреса, за да достави данните до вашето устройство.\nЗатова, както пощенският адрес осигурява правилна доставка на писма, IP адресът осигурява правилна доставка на цифрови данни.\nДефиниция на IP адрес. (натисни за да видиш) IP адресът (Internet Protocol адрес) е уникален числов идентификатор, който се използва за идентифициране на устройства в мрежа. Той служи за насочване на данни между устройства в интернет или локални мрежи. IP адресите се разделят на два основни типа: IPv4 (32-битови, напр. 192.168.1.1) и IPv6 (128-битови, напр. 2001:0db8:85a3:0000:0000:8a2e:0370:7334), като IPv6 е създаден заради изчерпване на наличните IPv4 адреси. IP адресите могат да бъдат статични (непроменящи се) или динамични (променяни автоматично от доставчика на интернет услуги). Subnet mask (маска) Subnet mask (мрежова маска) е числова стойност, която определя как IP адресът е разделен на две части: мрежова част и хост част. Маската помага за идентифициране на мрежата, към която принадлежи даден IP адрес, и устройствата в нея.\nОбикновено subnet mask се представя в същия формат като IP адреса (например 255.255.255.0) и се използва за:\nОпределяне на размера на мрежата: Посочва колко устройства (хостове) могат да бъдат адресирани в една мрежа. Улесняване на маршрутизацията: Помага на рутерите да идентифицират правилната мрежа за даден IP адрес. Пример: За мрежа с IP адрес 192.168.1.0 и маска 255.255.255.0, първите три октета идентифицират мрежата (192.168.1), а последният октет определя хостовете в нея.\nМаската може да бъде изписана и в съкратен формат, наречен CIDR нотация (Classless Inter-Domain Routing). Вместо пълната форма (например 255.255.255.0), се използва числова стойност, която показва броя на битовете, заети от мрежовата част.\nПример:\n255.255.255.0 се изписва като /24, тъй като първите 24 бита са зададени за мрежовата част. 255.255.0.0 е равносилно на /16. 255.0.0.0 съответства на /8. Тази нотация е често използвана в съвременните мрежови конфигурации, тъй като е по-компактна и удобна за представяне.\nMAC адрес Независимо от версията на IP протокола, всяко мрежово устройство притежава и уникален MAC адрес.\nMAC адресът (Media Access Control Address) е уникален идентификатор на мрежово устройство, който се задава на мрежовата карта (NIC) при производството. Това е 48-битово число, записано в шестнадесетичен формат (например 00:1A:2B:3C:4D:5E), и се използва за адресиране на устройства в локални мрежи.\nВъпреки това, че не е част от IP протокола, е важно да знаем за съществуването му.\nDHCP сървър DHCP (Dynamic Host Configuration Protocol) сървър е мрежови компонент, който автоматично разпределя IP адреси и други мрежови настройки (като мрежова маска, шлюз, DNS сървъри) на устройствата в мрежата.\nТой улеснява управлението на мрежите, като:\nПремахва необходимостта от ръчна конфигурация на IP адреси. Предотвратява конфликти на IP адреси, като гарантира, че всеки адрес е уникален. Поддържа динамично променящи се мрежи, където устройствата се свързват и изключват често. DHCP е особено полезен в големи мрежи и осигурява лесна интеграция на нови устройства.\nDNS сървър DNS сървър (Domain Name System сървър) е мрежова услуга, която превежда лесно запомнящи се домейн имена (като example.com) в IP адреси (например 192.0.2.1), необходими за комуникация между устройства в интернет или локални мрежи.\nОсновни функции на DNS сървъра:\nУлеснява достъпа до уебсайтове и онлайн услуги чрез използване на имена вместо числови адреси. Позволява лесно управление на промените в мрежовите адреси, без да се засяга достъпът до ресурси. Подобрява ефективността на мрежовите запитвания чрез кеширане на често използвани записи. DNS е съществена част от функционирането на интернет, осигурявайки бърз и удобен достъп до онлайн ресурси.\nВ локална мрежа (LAN) DNS сървърът изпълнява следните основни роли:\nПревод на имена в IP адреси: Позволява на потребителите и приложенията да използват лесно запомнящи се имена (като printer.local) вместо IP адреси за достъп до устройства и услуги в мрежата. Улесняване на вътрешна комуникация: Осигурява бърз и точен достъп до ресурси, като файлови сървъри, мрежови принтери или приложения, чрез използване на именувани адреси. Подобрена мрежова ефективност: Чрез кеширане на DNS записи, запитванията за често използвани ресурси се обработват по-бързо, което намалява времето за достъп. Централизирано управление на имената: Позволява на администраторите да създават и управляват локални домейн имена за устройствата и услугите в мрежата, осигурявайки по-добра организация и лесно управление. В локална мрежа DNS сървърът е ключов за удобството и ефективността на взаимодействието между устройства и потребители.\nВидове мрежи фиг. 1 LAN (Local Area Network) и WAN (Wide Area Network) са два основни типа мрежи.\nLAN е локална (частна) мрежа, която свързва устройства в ограничена географска зона, като дом, офис или училище. Тя осигурява висока скорост на предаване на данни и обикновено използва кабели или Wi-Fi за връзка.\nWAN е широка мрежа, която обхваща големи разстояния, свързвайки множество LAN мрежи. Интернет е най-големият пример за WAN. Тези мрежи използват телекомуникационни технологии, като сателити и оптични кабели, и често са по-бавни и скъпи за поддръжка в сравнение с LAN.\nАдресни пространства Локалното IPv4 адресно пространство се отнася до специално резервирани IP адреси, които се използват само в частни мрежи и не са достъпни в глобалния интернет. Тези адреси се дефинират от стандарта RFC 1918 и включват три основни диапазона:\n10.0.0.0 – 10.255.255.255 (10.0.0.0/8) 172.16.0.0 – 172.31.255.255 (172.16.0.0/12) 192.168.0.0 – 192.168.255.255 (192.168.0.0/16) Това пространство служи за:\nЛокална комуникация между устройствата в частната мрежа. Намаляване на необходимостта от глобални IP адреси, като използва NAT (Network Address Translation) за достъп до интернет. Подобряване на сигурността, тъй като тези адреси не са видими извън локалната мрежа. Gateway адрес (шлюз) Gateway (шлюз) е мрежово устройство или софтуерен компонент, който свързва различни мрежи и управлява трафика между тях. В контекста на IP мрежи, шлюзът обикновено е рутер, който свързва локалната мрежа (LAN) с външна мрежа, като интернет.\nОсновнa функция на Gateway е да маршрутизира трафика (препраща данни между различни мрежи).\nНастройки на мрежова карта Един от начините да достигнем до мрежовите настройки, е през Settings -\u0026gt; Network \u0026amp; Internet -\u0026gt; Change adapter options.\nфиг. 2 Следващата стъпка е да избрем Properties (Свойства) на мрежовата карта, която използваме. От списъка с протоколи избираме Internet Protocol Version 4 (TCP/IPv4).\nфиг. 3 След това в завимисимост от целта, имаме възможност за автоматично получаване на настройките (Obtain an IP address automatically и Obtain DNS server address automatically) от DHCP сървъра или за ръчна настройка. Автоматичното получаване на адреси е зададено по подразбиране, но кога се налага да използваме ръчни/статични настройки?\nИзползването на статични IP адреси в локална мрежа се налага, когато е необходимо определени устройства да имат фиксирани, неизменни адреси. Това е важно за:\nСървъри и мрежови услуги: Устройства като файлови сървъри, уеб сървъри, принтери или бази данни изискват статични IP адреси, за да са лесно достъпни за потребителите и приложенията.\nУстройства с постоянна роля в мрежата: Шлюзове, рутери и мрежови устройства (например CCTV камери) трябва да имат статичен адрес, за да се гарантира стабилна комуникация и конфигурация.\nМинимизиране на конфликти и грешки: В мрежи с критично значение, статичните адреси гарантират предсказуемост и елиминират потенциални проблеми, свързани с промяна на адресите.\nУправление и мониторинг: Статичните IP адреси улесняват мрежовите администратори при диагностициране на проблеми, управление на мрежови ресурси и настройка на защитни стени или VPN.\nИзползването на статични адреси осигурява стабилност и контрол в среда, където динамичното разпределение на адреси (чрез DHCP) може да бъде неподходящо.\n","date":"December 5, 2024","permalink":"/posts/ipv4/","summary":"Основи на компютърните мрежи","title":"IPv4 или как да се ориентираме в собствената мрежа.","type":"posts"},{"content":" За работа в Windows Win + d - показва Desktop; Win + e - отваря File Explorer; Ctrl + Shift + Esc - отваря Task Manager; Win + Shift + s – отваря Snipping Tool; Win + PrtScn - прави снимка на екрана и я записва в C:\\Users\\username\\Pictures\\Screenshots; Win + i - отваря Settings; Win – отваря Start меню; Win + l - заключва Windows (без да затваря отворените програми); Win + . - отваря emoji меню; Win + Tab - отваря Task View меню (за работа с виртуални екрани); Win + x - отваря контекстното меню на Start бутона; Win + Space - превключва между клавиатурни подредби; Win + m - минимизира активния прозорец; Win + r - показва диалогов прозорец за стартиране на програми; Win + Pause/Break - показва информация за системата; Win + up - максимизира активния прозорец; Win + down - възстановява активния прозорец; Win + = - отваря Magnifier (лупа); повторно натискане води до увеличаване; Win + - - ако е отворен Magnifier намалява изображението; Win + Left/Right – разделя екрана на две части и разпъва избран прозорец във всяка; Alt + F4 - затваря активния прозорец, ако е активен Desktop, извежда диалогов прозорец за рестартиране, изключване и т.н; Alt + Tab - превключване \u0026ldquo;напред\u0026rdquo; между отворените програми; Alt + Shift + Tab - превключване \u0026ldquo;назад\u0026rdquo; между отворените програми; Общи Ctrl + a - селектира/избира всички елементи в активния прозорец; Ctrl + c или Ctrl + Insert - копира избраните елементи в Clipboard; Ctrl + x - изрязване (премества избраните елементи в Clipboard); Ctrl + v или Shift + Insert - поставя съдържанието на clipboard в активния прозорец. Ctrl + o – показва диалогов прозорец за отваряне на файл; Ctrl + f - показва диалогов прозорец за търсене; Ctrl + s - записва текущия файл; Ctrl + z - Undo - \u0026ldquo;отмяна\u0026rdquo; на последното действие; Ctrl + r - Redo - \u0026ldquo;повторение\u0026rdquo; на отменено действие; Ctrl + p - отваря диалогов прозорец за печат; Ctrl + n - отваря нов прозорец; Ctrl + w - затваря текущия прозорец; За работа в Word Ctrl + b - удебелен шрифт (bold); Ctrl + u - подчертан шрифт (underline); Ctrl + i - курсив/италик шрифт (italic); Ctrl + l - ляво подравняване на параграф; Ctrl + e - центриране на параграф; Ctrl + r - дясно подравняване на параграф; Ctrl + j - двустранно подравняване на параграф; Ctrl + k - създава хипер връзка (hyperlink); F7 - отваря диалогов прозорец за проверка на правописа; Shift + F7 - отваря речник; Ctrl + Left arrow или Ctrl + Right arrow – прескача цяла дума; Shift + Ctrl + Left arrow или Shift + Ctrl + Right arrow – селектира цяла дума; Браузъри Ctrl + n - отваря нов прозорец; Ctrl + Shift + n - отваря нов прозорец в Инкогнито режим; Ctrl + t - отваря нов раздел; Ctrl + Shift + t - отваря последно затворена сесия; Alt + Left arrow - отваря страница \u0026ldquo;назад\u0026rdquo; ( back ) от историята; Alt + Right arrow - отваря страница \u0026ldquo;напред\u0026rdquo; ( forward ) от историята; Ctrl + w или Ctrl + F4 - затваря текущия раздел; Ctrl + D или F6 – премества фокуса в адресния панел; F11 - режим на цял екран; F11 или натискане и задържане Esc - изключва режима на цял екран; ","date":"November 14, 2024","permalink":"/posts/shortcuts/","summary":"Съкратен списък на клавишни комбинации.","title":"Полезни Клавишни Комбинации (за Windows, Текст или Браузър)","type":"posts"},{"content":" Parchive (Par или Parity Archive) е файлов формат за възстановяване на данни, използван за поправка на повредени или липсващи файлове. Основната цел на Parchive е да предпазва данните от загуба при пренос или съхранение, като предоставя възможност за възстановяване чрез допълнителни паритетни файлове (.par, .par2). Този метод се основава на кодове за излишност и се използва за контрол на целостта на данните. Форматът е особено популярен сред потребителите на Usenet, където често се случва част от данните да липсват или да са повредени.\nС помощта на Parchive данните могат да бъдат възстановени, дори ако част от оригиналните файлове липсват.\nЕто обновен списък с програми за създаване и възстановяване чрез par2 файлове, включително WinRAR:\nMultiPar — мощна и популярна програма за Windows за създаване и възстановяване на par2 файлове. MultiPar предлага удобен интерфейс и е подходяща както за начинаещи, така и за напреднали потребители. Тя поддържа различни настройки за персонализиране на количеството паритетни данни, което осигурява по-голяма гъвкавост при възстановяването на повредени файлове.\nQuickPar — класическа програма за работа с par2 файлове на Windows. Лесна за използване и бърза, макар да не се актуализира активно, тя остава популярна сред потребителите на Usenet.\npar2cmdline — инструмент с отворен код за работа с par2 файлове през командния ред, достъпен за Windows, macOS и Linux. Този инструмент е подходящ за напреднали потребители, които предпочитат работа в терминал.\nWinRAR — популярна програма за компресиране и архивиране, която поддържа създаването на обикновени архиви с излишък (recovery records) за възстановяване на данни, макар че не поддържа директно par2 файлове. Recovery record функцията в WinRAR добавя излишни данни в RAR архивите, което позволява възстановяване при частична загуба на информация, като предлага подобна, но различна защита от тази при par2 файловете.\nТези инструменти предлагат различни подходи за възстановяване на данни, като MultiPar и par2cmdline са специализирани за работа с par2 файлове, а WinRAR използва собствени методи за защита и възстановяване на архиви.\nПрограмата върху която ще се съсредоточим е MultiPar (фиг. 1), тъй като е все още се поддържа а и лесна за работа.\nИнсталация Инсталация с WinGet\nwinget install YutakaSawada.MultiPar -s winget Конфигуриране фиг. 1 Преди да пристъпим към програмата е хубаво да разгледаме настройките ѝ, защото те ще ни улеснят в работата ни. В първата секция (Sytem settings) на (фиг. 2) е хубаво да направим следните настройки:\nAssociate with PAR2 recovery files - асоциира PAR2 файловете с MultiPar. Integrate MultiPar into Shell - добавя MultiPar в контекстното меню за файлове и папки (фиг. 3). Enable GPU acceleration - позволява използването на дискретна видеокарта (ако има такава в компютъра) за по-бързи изчисления. фиг. 2 фиг. 3 Програмата предлага и много добра интеграция с инструмента за архивиране 7-zip. В следващата секция (Client behavior) ще изберем формат на файловете за възстановяване. Той трябва да бъде PAR 2.0 (фиг. 4).\nфиг. 4 В последната секция (Automated tasks) има още две удобни настройки (фиг. 5):\nDelete damaged files after Repair - след успешна поправка, развалените копия да се изтриват. Send files to Recycle Bin - когато програмата изтрива файлове, да ги изпраща в кошчето. фиг. 5 Създаване на файлове за възстановяване За да можем да създадем файлове за възстановяване, първо трябва да добавим файлове и/или папки по избор. Това може да стане по няколко начина:\nчрез десен бутон върху файловете в File Explorer (фиг. 3); чрез \u0026ldquo;влачене\u0026rdquo; от File Explorer в прозореца на програмата (фиг. 6); или от самата програма чрез бутона Add Files (фиг. 6); Следващата стъпка е да настроим параметрите за генериране на файловете (фиг. 6). Настройката може да се извърши само по един от четири възможни параметъра (Block Count, Redundancy, Number of Recovery blocks и Number of Recovery files). Ако променим един от въпросните параметри, автоматично се преизчисляват останалите. В практиката се оказа удачно да се използва само параметъра за редундантност (Redundancy), като целта е да постигнем ефективност (Efficeny) по-голяма от 90%. Едновременно с това следете за размера на par2 файловете, който може да се окаже същия като началните. В този случай ще изгубите много пространство, което е неефективно.\nфиг. 6 Възстановяване Процеса по проверка/възстановяване става чрез десен клавиш върху par2 файл (фиг. 7) или просто двоен клик.\nфиг. 7 След като се отвори програмата (фиг. 8), проверката е вече извършена и можем да видим дали има нужда от възстановяване.\nфиг. 8 Ако е необходимо възстановяване натискаме бутона поправка (Repair) и изчакваме процеса да завърши (фиг. 9). Важно е да споменем, че процесът не винаги е успешен, все пак работим с вероятности.\nфиг. 9 ВАЖНО! След всяка редакция на файловете, които искаме да защитим, е необходимо да генерираме нови par2 файлове. ","date":"November 12, 2024","permalink":"/posts/parchive/","summary":"Parchive (Par или Parity Archive) е файлов формат за възстановяване на данни, използван за поправка на повредени или липсващи файлове.","title":"Спасете данните си с тази програма!","type":"posts"},{"content":" Управлението на услугата \u0026ldquo;Print Spooler\u0026rdquo; е от съществено значение за администрацията на печатни услуги, тъй като спулерът осигурява правилното разпределение във вид на опашка и обработка на печатните задачи. Чрез използването на PowerShell, системните администратори могат лесно да автоматизират контрола на тази услуга, да оптимизират работата ѝ и бързо да диагностицират и решават проблеми.\nВ тази статия ще разгледаме как с помощта на PowerShell скрипт могат да се извършват основни операции като стартиране, спиране и рестартиране на услугата \u0026ldquo;Print Spooler\u0026rdquo;, с цел да създадем такъв скрипт, който да проверява до каква степен този процес натоварва системата, да го рестартира и да премахва временните принт задачи.\nСистемни услуги(system services) Какво са system services ? (натисни за да видиш) System services са фонови процеси или програми в операционната система, които изпълняват ключови функции за поддържане на нормалната работа на компютъра. Те стартират автоматично при зареждане на системата и осигуряват основни ресурси и услуги, като управление на мрежата, сигурност, управление на паметта и хардуерни взаимодействия. Преди да пристъпим към създаването на скрипта, трябва да разгледаме как се управляват услугите \u0026ldquo;ръчно\u0026rdquo;.\nНай-бързите начини за достъп до управлението на system services са много, но има няколко стандартни метода.\nTask Manager (Диспечер на задачи):\nНатиснете Ctrl + Shift + Esc или Ctrl + Alt + Delete и изберете Task Manager. Отидете в раздела Services, за да видите и управлявате текущите услуги. Services Management Console (Управление на услуги):\nНатиснете Win + R и въведете services.msc, след което натиснете Enter. Това ще отвори прозорец с всички услуги, където можете да ги стартирате, спрете или промените настройките им. Computer Management:\nНатиснете десен клавиш върху старт бутона и изберете Computer Management (фиг. 1). След като се отвори екрана за управление, остава само да открием услугата(service), която ни интересува и да приложим някое от следните действия: разрешаване/забраняване, старт/стоп/рестарт.\nфиг. 1 Проблем със спулера и как да го решим със скрипт Понякога(всъщност доста често), поради комбинация от несъвместими драйвери, обновления или програми се получава голямо натоварване на системата от спулера, но не и пълно блокиране на системата. Проблемът изчезва, когато рестартираме компютъра или спулера, но това е много досадно и отнема време. Затова ще напишем скрипт, който да рестартира спулера, ако спулера натовари процесора до определено ниво.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 # ____ _ _ ____ ____ ___ ____ ____ ____ # / ___| | | | _ \\/ ___| / _ \\| _ \\| __ ) / ___| # | | | | | | |_) \\___ \\| | | | |_) | _ \\| | _ # | |___| |_| | _ \u0026lt; ___) | |_| | _ \u0026lt;| |_) | |_| | # \\____|\\___/|_| \\_\\____/ \\___/|_| \\_\\____/ \\____| # Скрипт за контрол на състоянието на спулер процеса # получаване на текущото състояние $cpuUsage = Get-CimInstance -Query \u0026#34;SELECT PercentProcessorTime FROM Win32_PerfFormattedData_PerfProc_Process WHERE Name=\u0026#39;spoolsv\u0026#39;\u0026#34; if ($cpuUsage.PercentProcessorTime -gt 60) { # по подразбиране \u0026gt; 60% Restart-Service -Name Spooler } Това е достатъчно за да се рестартира процеса, след като превиши 60 процентната граница. Ако желаем да получаваме известия при всеки рестарт на спулера трябва да допълним скрипта по следният начин:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 # ____ _ _ ____ ____ ___ ____ ____ ____ # / ___| | | | _ \\/ ___| / _ \\| _ \\| __ ) / ___| # | | | | | | |_) \\___ \\| | | | |_) | _ \\| | _ # | |___| |_| | _ \u0026lt; ___) | |_| | _ \u0026lt;| |_) | |_| | # \\____|\\___/|_| \\_\\____/ \\___/|_| \\_\\____/ \\____| # Скрипт за контрол на състоянието на спулер процеса # получаване на текущото състояние $cpuUsage = Get-CimInstance -Query \u0026#34;SELECT PercentProcessorTime FROM Win32_PerfFormattedData_PerfProc_Process WHERE Name=\u0026#39;spoolsv\u0026#39;\u0026#34; if ($cpuUsage.PercentProcessorTime -gt 60) { # по подразбиране \u0026gt; 60% Restart-Service -Name Spooler # Известие за проблем Add-Type -AssemblyName System.Windows.Forms $objNotifyIcon = New-Object System.Windows.Forms.NotifyIcon $objNotifyIcon.Icon = [System.Drawing.SystemIcons]::Information $objNotifyIcon.BalloonTipTitle = \u0026#34;Печатна тревога...\u0026#34; $objNotifyIcon.BalloonTipText = \u0026#34;Спулера не работи!\u0026#34; $objNotifyIcon.Visible = $true $objNotifyIcon.ShowBalloonTip(10000) } За съжаление понякога остават временни файлове и не е достатъчно само рестарт на услугата, а и да изтрием тези файлове. По подразбиране достъпът до папката, в която се записват файловете е забранен и се налага да я отворим през File Explorer поне веднъж %SYSTEMROOT%\\System32\\Spool\\PRINTERS\\. Тук трябва да вметнем и че тези файлове могат да бъдат изтривани само когато услугата е спряна. Ето и как ще изглежда крайният вариант на скрипта:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 # ____ _ _ ____ ____ ___ ____ ____ ____ # / ___| | | | _ \\/ ___| / _ \\| _ \\| __ ) / ___| # | | | | | | |_) \\___ \\| | | | |_) | _ \\| | _ # | |___| |_| | _ \u0026lt; ___) | |_| | _ \u0026lt;| |_) | |_| | # \\____|\\___/|_| \\_\\____/ \\___/|_| \\_\\____/ \\____| # Скрипт за контрол на състоянието на спулер процеса # Определяне на пътя към папката %SYSTEMROOT%\\System32\\Spool\\PRINTERS $PrnTempFolder = \u0026#34;$env:SYSTEMROOT\\System32\\Spool\\PRINTERS\\\u0026#34; # Списък с разширения на файлове, които ще бъдат изтрити $Extensions = @(\u0026#34;*.SPL\u0026#34;, \u0026#34;*.SHD\u0026#34;) # получаване на текущото състояние $cpuUsage = Get-CimInstance -Query \u0026#34;SELECT PercentProcessorTime FROM Win32_PerfFormattedData_PerfProc_Process WHERE Name=\u0026#39;spoolsv\u0026#39;\u0026#34; if ($cpuUsage.PercentProcessorTime -gt 60) { # по подразбиране \u0026gt; 60% # спиране на услугата Stop-Service -Name Spooler # Цикъл, който преминава през всеки тип файл и го изтрива foreach ($Extension in $Extensions) { Get-ChildItem -Path $TempFolder -Filter $Extension -File | Remove-Item -Force } # стартиране на услугата Start-Service -Name Spooler # Известие за проблем Add-Type -AssemblyName System.Windows.Forms $objNotifyIcon = New-Object System.Windows.Forms.NotifyIcon $objNotifyIcon.Icon = [System.Drawing.SystemIcons]::Information $objNotifyIcon.BalloonTipTitle = \u0026#34;Печатна тревога...\u0026#34; $objNotifyIcon.BalloonTipText = \u0026#34;Спулера не работи!\u0026#34; $objNotifyIcon.Visible = $true $objNotifyIcon.ShowBalloonTip(10000) } Препоръка: Създайте папка %HOMEPATH%\\scripts и записвайте там своите скриптове. Забележка: %HOMEPATH% е синоним (пряк път) към вашата home папка (c:\\Users\\вашето потребителско име). Права на достъп За да функционира този скрипт е необходимо Вашият потребител да е с администраторски права, ако ли не свържете се с Вашия администратор и му покажете тази статия.\nСтартиране на скрипта За да направите така, че скрипта да се изпълнява автоматично прочетете тази статия или гледайте видеото към настоящата.\nВажно: Този скрипт трябва да се изпълнява на всяка минута. На (фиг. 5) от горепосочената статия трябва да изберете \u003c?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?\u003e Repeat task every: 1 minute и for a duration of: Indefinitely.\n","date":"October 28, 2024","permalink":"/posts/spooler-restart/","summary":"Управлението на услугата \u0026ldquo;Print Spooler\u0026rdquo; е от съществено значение за администрацията на печатни услуги, тъй като спулерът осигурява правилното опашково разпределение и обработка на печатните задачи.","title":"Принтерът блокира! (Скрипт за Print Spooler)","type":"posts"},{"content":" PowerShell В тази статия ще разгледаме как да използваме PowerShell за създаване на скрипт, който събира информация за натоварването на процесора. Този вид скриптове са изключително полезен за системните администратори и IT специалистите, тъй като позволява лесно и бързо наблюдение на използването на процесора в \u0026ldquo;реално време\u0026rdquo; или за определен период. Ще обясним как да използваме вградени командлети в PowerShell, за да съберем данни за натовареността, и ще покажем как тази информация може да бъде анализирана за идентифициране на потенциални проблеми в системната производителност.\nКакво е PowerShell ? (натисни за да видиш) PowerShell е мощен инструмент за автоматизация и управление, разработен от Microsoft. Той комбинира възможностите на команден интерфейс и скриптов език, което позволява на системни администратори и разработчици да автоматизират задачи, да управляват конфигурации и да работят със системни ресурси на Windows, Linux и macOS. Основният компонент на PowerShell е обектно-ориентирана среда, която използва команди, наречени cmdlet-и, за извършване на операции с обекти от .NET, което прави работата с данни и файлови системи по-интуитивна и гъвкава. PowerShell ISE И преди да започнем със скрипта няколко думи за това, какъв инструмент да използваме. Най-удобният инструмент е вградения в Windows - PowerShell ISE (фиг. 1), какво трябва да знаем за сигурността, когато сваляме готови скриптове.\nКакво е PowerShell ISE ? (натисни за да видиш) PowerShell ISE (Integrated Scripting Environment) е интегрирана скриптова среда за PowerShell, разработена от Microsoft. Тя предлага удобен графичен интерфейс, който позволява на потребителите да пишат, редактират, тестват и изпълняват PowerShell скриптове. PowerShell ISE разполага с функции като оцветяване на синтаксиса, автоматично довършване на команди, и дебъгинг, което улеснява създаването на сложни скриптове и намалява вероятността от грешки. Тази среда е подходяща както за начинаещи, така и за напреднали потребители, които искат да автоматизират задачи и да управляват конфигурации в Windows системи. фиг. 1 Сигурност Сигурността при изпълнение на PowerShell скриптове е ключов аспект, особено в корпоративни среди, където неправилно написан или злонамерен скрипт може да изложи на риск цялата система. PowerShell разполага с няколко нива на защита, които се управляват чрез Execution Policy (политика за изпълнение) — настройка, която определя какви скриптове могат да бъдат изпълнявани.\nОсновните команди за управление на тази политика са: (натисни за да видиш) Get-ExecutionPolicy – показва текущото ниво на защита. Set-ExecutionPolicy – променя политиката за изпълнение, като предлага няколко нива: Restricted – забранява изпълнението на скриптове. AllSigned – позволява само подписани скриптове от доверени източници. RemoteSigned – изисква подпис само за скриптове, изтеглени от интернет. Unrestricted – разрешава изпълнението на всички скриптове, но предупреждава потребителя при стартиране на скрипт от интернет. Чрез използването на тези политики и подписването на скриптове администраторите могат да подсигурят изпълнението на PowerShell команди и да предотвратят потенциални заплахи.\nВ общия случай се използва политиката за \u0026ldquo;отдалечено подписан скрипт\u0026rdquo;, тъй като по този начин знаем кой е авторът на скрипта и се задава с командата Set-ExecutionPolicy -ExecutionPolicy RemoteSigned -Scope CurrentUser (фиг.2).\nфиг. 2 Скрипт Следва да преминем към забавната част. Копирайте си скрипта в клипборда, поставете го в PowerShell ISE и го запишете на място и с име, които трябва да запомните защото ще ви трябват по-късно. Можете да го стартирате със зелената стрелка и да го спрете със стоп бутона (фиг. 1).\nСъздайте папка c:\\Users\\вашето потребителско име\\scripts и записвайте там своите скриптове. Всички скриптове трабва да носят разширение .ps1 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 # ____ _ _ ____ ____ ___ ____ ____ ____ # / ___| | | | _ \\/ ___| / _ \\| _ \\| __ ) / ___| # | | | | | | |_) \\___ \\| | | | |_) | _ \\| | _ # | |___| |_| | _ \u0026lt; ___) | |_| | _ \u0026lt;| |_) | |_| | # \\____|\\___/|_| \\_\\____/ \\___/|_| \\_\\____/ \\____| # Скрипт за проверка състоянието на процесора и извеждане на информация $cpuThreshold = 90 # предел на натоварването $notificationCooldown = 300 # 300 seconds = 5 minutes $notificationSentTime = $null Add-Type -AssemblyName System.Windows.Forms # Get the script\u0026#39;s startup folder $scriptStartupFolder = Split-Path -Parent $MyInvocation.MyCommand.Definition # Безкраен цикъл за следене състоянието на процесора while ($true) { # Взимане на текущото натоварване на процесора от Task Manager $cpuUsage = (Get-Counter \u0026#39;\\Processor(_Total)\\% Processor Time\u0026#39;).CounterSamples.CookedValue # Ако натоварването на процесора надхвърли прага, регистрира събитието, ако това не се е случило в последните 5 мин. if ($cpuUsage -gt $cpuThreshold -and (!$notificationSentTime -or (New-TimeSpan -Start $notificationSentTime).TotalSeconds -ge $notificationCooldown)) { # Create a timestamp $timestamp = Get-Date -Format \u0026#34;yyyy-MM-dd HH:mm:ss\u0026#34; $message = \u0026#34;Warning: CPU usage is above $cpuThreshold%! Current usage is $cpuUsage% at $timestamp.\u0026#34; # Регистрира събитието в текстов файл $logFile = \u0026#34;$scriptStartupFolder\\cpu-alert-log.txt\u0026#34; Add-Content $logFile $message # Възможност за извеждане съобщение на екрана ( Windows 10+ ) $objNotifyIcon = New-Object System.Windows.Forms.NotifyIcon $objNotifyIcon.Icon = [System.Drawing.SystemIcons]::Information $objNotifyIcon.BalloonTipTitle = \u0026#34;Warning!\u0026#34; $objNotifyIcon.BalloonTipText = \u0026#34;$message\u0026#34; $objNotifyIcon.Visible = $true $objNotifyIcon.ShowBalloonTip(10000) # Записва кога е изпратено съобщението $notificationSentTime = Get-Date } # Пауза за 5 секунди преди следващата проверка Start-Sleep -Seconds 5 } Скриване на прозореца при изпълнение При изпълнението на всеки скрипт в Windows винаги има видим прозорец (PowerShell ISE, PowerShell конзолата или Windows Terminal). Към този момент сме открили само един начин за ефективно скриване на прозореца. Оригиналният скрипт на Andreas Mariotti може да бъде намерен тук . В нашата версия има леки промени, но като цяло е запазен оригиналът.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 # Original script by Andreas Mariotti: # https://www-mariotti-de.translate.goog/simpler-powershell-host-zum-ausfuehren-von-powershell-skripten-ohne-stoerendes-konsolenfenster/?_x_tr_sl=auto\u0026amp;_x_tr_tl=en\u0026amp;_x_tr_hl=de\u0026amp;_x_tr_pto=wapp # Get the script\u0026#39;s startup folder $scriptStartupFolder = Split-Path -Parent $MyInvocation.MyCommand.Definition # Inline C# code for a simple PowerShell host and compile $code = @\u0026#39; using System.Management.Automation; using System.Collections.ObjectModel; namespace PowerShellHost { class Program { static void Main(string[] args) { if (args.Length == 0) return; using (PowerShell ps = PowerShell.Create()) { string code = System.IO.File.ReadAllText(args[0]); ps.AddScript(code); Collection \u0026lt;PSObject\u0026gt; psobject = ps.Invoke(); } } } } \u0026#39;@ # Compile Add-Type -OutputAssembly \u0026#34;$scriptStartupFolder\\PowerShellHost.exe\u0026#34; -OutputType \u0026#39;WindowsApplication\u0026#39; -TypeDefinition $code Скрипта трябва да запишете на същото място както и предния, след което е достатъчно да се стартира веднъж и в същата папката ще се появи PowerShellHost.exe.\nTask Scheduler Следващата стъпка е да настроим Windows да пуска скрипта при стартиране. За тази цел ще използваме Task Scheduler (фиг. 3) компонента на операционната система.\nКакво е Task Scheduler ? (натисни за да видиш) Task Scheduler е вграден инструмент в операционната система Windows за автоматизиране на изпълнението на задачи. Позволява планиране на стартирането на програми, скриптове или други процеси в определено време, при настъпване на зададени събития или по установен график. Task Scheduler работи във фонов режим и може да се използва за редовни задачи като архивиране на данни, обновления на софтуер или системни проверки. За да стартирате Task Scheduler, можете да натиснете \u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\rклавиша на клавиатурата и да изпишете sched или task.\nфиг. 3 В инструмента трябва да натиснете върху Task Scheduler Library(1) в лявата секция, след което ще се появи в дясната секция възможност за създаване на нова задача Create Task...(2) (фиг. 4).\nфиг. 4 За име(3) на задачата напишете нещо кратко, което да Ви подсеща за темата на задачата. В описанието(4) може да се отпуснете и да пишете по-подробно. Точка (5) от (фиг. 4) указва изпълнението на задачата да се извърши само след зареждане на потребителя.\nфиг. 5 Сега трябва да зададем на второто \u0026ldquo;табче\u0026rdquo;, кога да се стартира задачата като следваме стъпките от (фиг. 5).\nфиг. 6 Аналогично следвате стъпките от (фиг. 6) и ако сте спазили препоръкта по-рано, в стъпка (4) трябва да сте получили \u0026quot;c:\\Users\\вашето потребителско име\\scripts\\PowerShellHost.exe\u0026quot;, а в стъпка (5) \u0026quot;c:\\Users\\вашето потребителско име\\scripts\\името на скрипт1.ps1\u0026quot;.\nфиг. 7 фиг. 8 Пресъздайте настройките, както са показани на (фиг. 7) и (фиг. 8). Когато сте готови запишете задачата с ОК бутона.\nВече всичко е готово! Сега, ако не ни се чака до следващия рестарт на системата можем да натиснем десен клавиш върху задачата и да изберем Run.\nБонус съдържание Разбира се може да направите промени по скрипта. Например, ако желаете скриптът да реагира по-рано можете да промените ред 8 със желаната стойност\n$cpuThreshold = 75 # предел на натоварването или да промените известието(ред 25) на български език\n$message = \u0026#34;Натоварването на процесора е над $cpuThreshold%! В $timestamp натоварването е $cpuUsage%.\u0026#34; Експериментирайте\u0026hellip;\n","date":"October 28, 2024","permalink":"/posts/cpu-usage-mon/","summary":"Колко често се е случвало компютъра да Ви се забавя ужасно?","title":"Как да получавате известия при високо натоварване на процесора?","type":"posts"}]